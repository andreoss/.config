#!/usr/bin/perl

use strict;
use warnings;
use feature qw(signatures);
no warnings "experimental::signatures";

# https://www.ditig.com/256-colors-cheat-sheet

sub color_rbg ( $r, $b, $g ) { 16 + $r * 36 + $g * 6 + $b }

sub color_gray ($m) { 232 + $m }

sub clear ( $nl = 1 ) {
    print "\x1b[0m";
    print "\n" if $nl;
}

sub print_color ( $c, $text = '  ' ) {
    warn "out of range: $c" if $c < 0 || $c > 255;
    print "\x1b[48;5;${c}m$text";
}

sub print_color_rbg ( $r, $b, $g, $text = '  ' ) {
    print_color(color_rbg($r,$b, $g), $text );
}

sub colors ( $name, @xs ) {
    print $name;
    print_color($_) for @xs;
    clear;
}


colors( "Dim         ", 0 .. 7 );
colors( "Bright      ", 8 .. 15 );
colors( "Blue        ", map { color_rbg( 0,  $_, 0 ) } ( 1 .. 5 ) );
colors( "Cyan        ", map { color_rbg( 0,  $_, $_ ) } ( 1 .. 5 ) );
colors( "Green       ", map { color_rbg( 0,  0,  $_ ) } ( 1 .. 5 ) );
colors( "Purple      ", map { color_rbg( $_, $_, 0 ) } ( 1 .. 5 ) );
colors( "Red         ", map { color_rbg( $_, 0,  0 ) } ( 1 .. 5 ) );
colors( "Yellow      ", map { color_rbg( $_, 0,  $_ ) } ( 1 .. 5 ) );
colors( "Grayscale   ", map { color_gray($_) } ( 0 .. 23 ) );

for my $red ( 0 .. 5 ) {
    for my $green ( 0 .. 5 ) {
        for my $blue ( 0 .. 5 ) {
            print_color_rbg( $red, $blue, $green );
        }
        clear(undef);
    }
    clear;
}
